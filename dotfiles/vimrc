" Chris Koenig, February 2006
" ~/.vimrc

" Some excellent references:
"   http://nvie.com/posts/how-i-boosted-my-vim
"   http://stevelosh.com/blog/2010/09/coming-home-to-vim

" Note: nmap is normal mode, imap is insert mode, vmap is visual mode

filetype off
if isdirectory(expand("~/.vim/bundle"))
  call pathogen#runtime_append_all_bundles()
endif

filetype plugin indent on
" Use vim defaults instead of silly backwards-compatible vi settings.
set nocompatible

" There are apparently some security exploits to do with modelines. No biggie.
set modelines=0

" Keep the indenting of the last line
set autoindent

" Keep three lines above or below the cursor when scrolling near the edge.
set scrolloff=3

" Flash the screen on a bell:
set visualbell

" Use normal regex formatting! Inserts a \v to turn of vim's silliness.
nnoremap / /\v
vnoremap / /\v

" Save and load fold settings automatically. From http://dotfiles.org/~tsukkee/.vimrc
" Don't save options.
set viewoptions-=options
augroup vimrc
    autocmd BufWritePost *
    \   if expand('%') != '' && &buftype !~ 'nofile'
    \|      mkview
    \|  endif
    autocmd BufRead *
    \   if expand('%') != '' && &buftype !~ 'nofile'
    \|      silent loadview
    \|  endif
augroup END

" Show the cursor position at all times
set ruler

" Make sure status line is always visible
set laststatus=2
" Custom status line
if has("statusline")
    set statusline=%<%f\ %h%m%r%=%k[%{(&fenc\ ==\ \"\"?&enc:&fenc).(&bomb?\",BOM\":\"\")}]\ %-12.(%l,%c%V%)\ %P 
endif

" Assume a fast terminal collection, which sends more characters but smooths
" out animations like scrolling, and copy-pasting from outside.
set ttyfast

" Always show the mode, the partial command, and the cursor position:
set showmode
set showcmd
set ruler

" Set syntax highlighting
if has("syntax")
    syntax on
endif
" And syntax highlight from the start of the file; no messy half-highlighting.
autocmd BufEnter * :syntax sync fromstart

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

colorscheme desert

" Insert spaces when tab key is pressed
set expandtab
" Insert this many spaces for a tab
set tabstop=4
set softtabstop=4
" Insert this many spaces for an indentation
set shiftwidth=4

" Briefly highlight the matching '(' whenever ')' is typed
set showmatch
" How many tenths of a second to blink
set mat=2
" And disable the constant highlighting
let loaded_matchparen = 1

" Enable highlighting on searches
set hlsearch

" Bash-style filename completion
set wildmenu
set wildmode=list:longest
" Ignoring these file suffixes:
set wildignore=*~,#*#,*.o,*.class

" Turn off the bell
set vb t_vb=

" In insert mode, allow backspace over anything (line breaks, text beyond this insert session, indentations)
set backspace=eol,start,indent

" Recognize DOS-format ^M files
set textauto

" BOMB and Unicode encodings
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=utf-8,latin1
endif

" Detect when file is changed from outside
set autoread

" Set cursor movement keys to wrap between lines
set whichwrap+=<,>,h,l,~,[,]

" Store undo files, backup files, and swap files in my ~/.vim/tmp/ directory:
if isdirectory(expand("~/.vim/tmp/"))
  if has("persistent_undo")
    set undofile
    set undolevels=1000
    set undodir=~/.vim/tmp/undo/   " undo files
  endif

  set backup                       " enable backups
  set backupdir=~/.vim/tmp/backup/ " backups

  set directory=~/.vim/tmp/swap/   " swap files
endif

"""" MACVIM """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable control-tab to switch tabs:
noremap <c-tab> :tabnext<cr>
noremap <S-c-tab> :tabprevious<cr>

"""" MAPPINGS """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" The leader always ought to be , instead of \. Much easier to get to.
let mapleader = ","

" I do this sometimes.
command Q quit
" Let W mean 'save as sudo':
command W w !sudo tee % >/dev/null

" Make it easier to hop around multiple windows, using control+<direction>.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Set F6 to highlight lines longer than 80 characters, and erroneous spaces:
highlight BadSpacesAndLines ctermbg=green guibg=green
nnoremap <silent> <F6>
      \ :if exists('w:long_line_match') <Bar>
      \   :match none <Bar>
      \   unlet w:long_line_match <Bar>
      \ else <Bar>
      \   :match BadSpacesAndLines /.\%>80v.\+/ <Bar>
      \   let w:long_line_match = 1 <Bar>
      \ endif<CR>

" Set F7 to retab file, remove whitespace from end of lines
map <silent> <F7> :%s/\s\+$//g<CR>:retab<CR>

" Set F8 to toggle syntax
map <silent> <F8> :if exists("syntax_on")<Bar>syntax off<Bar>else<Bar>syntax on<Bar>endif<CR>

" Enable in-column up and down for wrapped lines
map <silent> <Up>   gk
map <silent> <Down> gj
" Enable in-column up and down for wrapped lines in INSERT mode
imap <silent> <Up>   <C-o>gk
imap <silent> <Down> <C-o>gj

" Press Space to turn off highlighting and clear any message already displayed.
:nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Map backspace to delete previous character
nmap <BS> <Esc><C-V><BS><Esc>

map ,, <Esc><C-w><C-w>

" Quickly remove old searches, which are pretty distracting.
nnoremap <leader><space> :noh<cr>
